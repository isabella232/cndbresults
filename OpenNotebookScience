----------------------------------------
Machine A: Apple MacBook Pro 12 with Intel Core i5 processor clocked at 2.7GHz
and 16 GB RAM. Running Mac OS X El Capitan 10.11.5.
----------------------------------------

Id:
Title:
Date:
Time_start:
Time_end:
Description:
Previous steps:
Instructions:
Result:
Conclusions:
State: 

----------------------------------------

Id:
    1
Title: 
    Selects test documentdb with a local benchmark. 
Date: 
    13/12/2016
Time_start: 10:05
Time_end: 10:05
Description: 
    Selects test running the benchmark in the machine A and the database is a
    instance of Documentdb in Microsoft Azure. The zone is: West Europe.
    (S2/1000 requests/s limit)
Previous steps: 
    Insert in the database documentdb the collections PropertyTypes,
    IDXProperty76, IDXProperty78, IDXProperty79, BlobStore.
Instructions:
    1. Clone the repository arkis/databaseComparison
    2. cd databaseComparison/Benchmark/documentdb
    3. docker build -t documentdbtest ./benchmark
    4. docker-compose up
Results:
    arkis/experiments/results/13-12-2016/documentdbtest/selectdocumentdb.txt
Conclusions: 
    Exception with error: request rate is large.
    https://blogs.msdn.microsoft.com/bigdatasupport/2015/09/02/dealing-with-requestratetoolarge-errors-in-azure-documentdb-and-testing-performance/
    It is a error by design. Sending requests at a rate more than
    our number of request units/sec.
State:
    Failure

----------------------------------------

Id:
    2
Title:
    Select crate benchmark and database in local
Date: 
    12/13/2016
Time_start:
    ~15:30
Time_end:
    ~16:00
Description:
    Selects test using docker compose. The benchmark and the database are
    in the machine A. 
Previous steps:
    Insert in the database crate the collections PropertyTypes,
    IDXProperty76, IDXProperty78, IDXProperty79, BlobStore.
Instructions:
    1. Clone the repository arkis/databaseComparison
    2. cd databaseComparison/Benchmark/
    3. docker build -t benchmark . (using the method s_crate())
    4. docker-compose up (Using the docker-compose-crate.yml)
Result:
    arkis/experiments/results/13-12-2016/cratetest/selects_crate_no_limits.json
Conclusions:
    Correct times without the usual limit with crate.
State: 
    Success

----------------------------------------  

Id:
    3
Title:
    MultiTenant test for option B.
Date:
    14/12/2016
Time_start:
    9:28
Time_end:
    9:37
Description:
    Selects test with multitenant for the option B implemented in google cloud.
    The database that we use is Mongodb.
    The test is running in two ways: with 10 threads (one per tenant) and in 
    only one thread.
Previous steps:
    A.Install the option B for mongodb in kubernetes:
        1. Clone the git repository clone/containers
        2. cd containers/KubernetesBlueprints/kubernetes1.4/simple/MultiTenant/persistent/googlepersistence/OPTIONB
        3. kubectl create -f .
    B. Run the insert method for the option B for inserts the collections
    PropertyTypes, IDXProperty76, IDXProperty78, IDXProperty79, BlobStore, with
    10 tenants. 
Instructions: 
    1. git clone arkis/databaseComparison
    2. Run the method multitenant_selects for option B with True for 
    the option thread.
    3. Run the method multitenant_selects for option B with False for 
    the option thread.
Result:
    - arkis/experiments/results/14-12-2016/bnot.json
    - arkis/experiments/results/14-12-2016/bwt.json
Conclusions:
State: 
    Success

----------------------------------------

----------------------------------------
